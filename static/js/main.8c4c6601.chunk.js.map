{"version":3,"sources":["components/ContactForm/ContactForm.module.css","App.module.css","components/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/Notification/Notification.module.css","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Notification/Notification.js","App.js","hooks/useLocalStorage.js","index.js"],"names":["module","exports","ContactForm","contactList","addNewContact","useState","name","setName","number","setNumber","handleChange","useCallback","e","target","value","handleSubmit","preventDefault","newContact","id","uuid","checkSameContact","find","toLowerCase","alert","resetForm","onSubmit","className","s","form","label","input","onChange","type","pattern","title","required","button","ContactListItem","contacts","deleteContact","map","item","onClick","ContactList","list","Filter","filterContactByName","Notification","App","key","init_value","JSON","parse","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setContacts","filter","setFilter","prev","filterContacts","useMemo","includes","app","length","dataset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c4c6601.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1jWx_\",\"label\":\"ContactForm_label__2yJRf ContactForm_form__1jWx_\",\"input\":\"ContactForm_input__Ezi5O\",\"button\":\"ContactForm_button__1EfvE ContactForm_input__Ezi5O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__YA0nX\",\"title\":\"App_title__3Okei\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__3MrBb\",\"button\":\"ContactListItem_button__2NTVM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3NwTT\",\"input\":\"Filter_input__22ZPU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__hGSVB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Notification_title__3eGIp\"};","import PropTypes from 'prop-types'\r\nimport { v4 as uuid } from 'uuid'\r\nimport s from './ContactForm.module.css'\r\nimport { useState, useCallback} from 'react'\r\n\r\nexport function ContactForm({contactList, addNewContact}) {\r\n    const [name, setName] = useState('')\r\n    const [number, setNumber] = useState('')\r\n\r\n    const handleChange = useCallback((e) => {\r\n        switch (e.target.name) {\r\n            case 'name':\r\n                setName(e.target.value)\r\n                break\r\n            case 'number':\r\n                setNumber(e.target.value)\r\n                break\r\n            default:\r\n                return\r\n        }\r\n    }, [])\r\n    \r\n    const handleSubmit = useCallback((e) => {\r\n      e.preventDefault()\r\n      const contactId = uuid()\r\n      const newContact = {\r\n        id: contactId,\r\n        name: name,\r\n        number: number,\r\n      }\r\n      const checkSameContact = contactList.find(e => e.name.toLowerCase() === newContact.name.toLowerCase())\r\n      if (!checkSameContact) {\r\n        addNewContact(newContact)\r\n      } else {\r\n        alert(`${checkSameContact.name} is already in contacts`)\r\n      }\r\n\r\n      resetForm()\r\n    }, [addNewContact, contactList, name, number])\r\n\r\n    const resetForm = () => {\r\n        setName('')\r\n        setNumber('')\r\n    }\r\n\r\n    return(\r\n      <form onSubmit={handleSubmit} className={s.form}>\r\n        <label className={s.label}>\r\n          Name\r\n          <input\r\n            className={s.input}\r\n            onChange={handleChange}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className={s.label}>\r\n          Number\r\n          <input\r\n            className={s.input}\r\n            onChange={handleChange}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={s.button}>Add contact</button>\r\n      </form>\r\n    )\r\n}\r\n\r\nContactForm.propTypes = {\r\n  contactList: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\r\n  addNewContact: PropTypes.func\r\n}","import PropTypes from 'prop-types'\r\nimport { v4 as uuid } from 'uuid'\r\nimport s from './ContactListItem.module.css'\r\n\r\nexport function ContactListItem({ contacts, deleteContact }) {\r\n    return (\r\n        <>\r\n            {contacts.map(e => {\r\n                return (\r\n                    <li className={s.item} key={uuid()}>{e.name}: {e.number}<button className={s.button} onClick={deleteContact} data-id={e.id}>X</button></li>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nContactListItem.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\r\n    deleteContact: PropTypes.func\r\n}","import PropTypes from 'prop-types'\r\nimport { ContactListItem } from '../ContactListItem/ContactListItem'\r\nimport s from './ContactList.module.css'\r\n\r\nexport function ContactList({contacts, deleteContact}) {\r\n    return (\r\n        <ul className={s.list}>\r\n           <ContactListItem contacts={contacts} deleteContact={deleteContact}/> \r\n        </ul>\r\n    )\r\n}\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\r\n    deleteContact: PropTypes.func\r\n}","import PropTypes from 'prop-types'\r\nimport s from './Filter.module.css'\r\n\r\nexport function Filter({filterContactByName}) {\r\n    return (\r\n        <>\r\n            <label className={s.label}>\r\n                Find contact by name\r\n                <input className={s.input} type=\"text\" onChange={filterContactByName}/>\r\n            </label>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n    filterContactByName: PropTypes.func\r\n}\r\n","import s from './Notification.module.css'\r\nexport function Notification() {\r\n    return (\r\n        <p className={s.title}>Contact list is empty</p>\r\n    )\r\n}","import s from './App.module.css';\r\nimport { useState, useMemo, useCallback } from 'react'\r\nimport { ContactForm } from './components/ContactForm/ContactForm'\r\nimport { ContactList } from './components/ContactList/ContactList'\r\nimport { Filter } from './components/Filter/Filter'\r\nimport { Notification } from './components/Notification/Notification'\r\nimport { useLocalStorage } from './hooks/useLocalStorage'\r\n\r\nfunction App() {\r\n    const [contacts, setContacts] = useLocalStorage('contacts',[])\r\n    const [filter, setFilter] = useState('')\r\n\r\n    const addNewContact = useCallback((newContact) => {\r\n        setContacts(prev => [...prev, newContact])\r\n    }, [setContacts])\r\n\r\n    const deleteContact = (e) => {\r\n        const id = e.target.dataset.id\r\n        setContacts(prev => prev.filter(e => e.id !== id))\r\n    }\r\n\r\n    const filterContactByName = (e) => {\r\n        setFilter(e.target.value.toLowerCase())\r\n    }\r\n\r\n    const filterContacts = useMemo(() => contacts.filter(e => e.name.toLowerCase().includes(filter)), [contacts, filter])\r\n\r\n    return (\r\n      <div className={s.app}>\r\n        <h1 className={s.title}>Phonebook</h1>\r\n        <ContactForm addNewContact={addNewContact} contactList={contacts}/>\r\n        <h2 className={s.title}>Contacts</h2>\r\n        {contacts.length > 0 ? (\r\n          <>\r\n            <Filter filterContactByName={filterContactByName}/>\r\n            <ContactList contacts={filterContacts} deleteContact={deleteContact} />\r\n          </>\r\n        ) : (<Notification/>)}\r\n      </div>)\r\n}\r\nexport default App;","import { useEffect, useState } from 'react';\r\n\r\nexport const useLocalStorage = (key, init_value) => {\r\n  const [state, setState] = useState(\r\n    () => JSON.parse(localStorage.getItem(key)) ?? init_value,\r\n  );\r\n  useEffect(() => {\r\n    localStorage.setItem(key, JSON.stringify(state));\r\n  }, [key, state]);\r\n  return [state, setState];\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}